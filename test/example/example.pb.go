// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: example.proto

package test

import (
	bytes "bytes"
	compress_gzip "compress/gzip"
	fmt "fmt"
	_ "github.com/waynz0r/protobuf/gogoproto"
	github_com_waynz0r_protobuf_proto "github.com/waynz0r/protobuf/proto"
	proto "github.com/waynz0r/protobuf/proto"
	github_com_waynz0r_protobuf_protoc_gen_gogo_descriptor "github.com/waynz0r/protobuf/protoc-gen-gogo/descriptor"
	github_com_waynz0r_protobuf_test "github.com/waynz0r/protobuf/test"
	github_com_waynz0r_protobuf_test_custom "github.com/waynz0r/protobuf/test/custom"
	io "io"
	io_ioutil "io/ioutil"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type A struct {
	Description          string                                `protobuf:"bytes,1,opt,name=Description" json:"Description"`
	Number               int64                                 `protobuf:"varint,2,opt,name=Number" json:"Number"`
	Id                   github_com_waynz0r_protobuf_test.Uuid `protobuf:"bytes,3,opt,name=Id,customtype=github.com/waynz0r/protobuf/test.Uuid" json:"Id"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *A) Reset()      { *m = A{} }
func (*A) ProtoMessage() {}
func (*A) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{0}
}
func (m *A) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *A) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_A.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *A) XXX_Merge(src proto.Message) {
	xxx_messageInfo_A.Merge(m, src)
}
func (m *A) XXX_Size() int {
	return m.Size()
}
func (m *A) XXX_DiscardUnknown() {
	xxx_messageInfo_A.DiscardUnknown(m)
}

var xxx_messageInfo_A proto.InternalMessageInfo

type B struct {
	A                    `protobuf:"bytes,1,opt,name=A,embedded=A" json:"A"`
	G                    []github_com_waynz0r_protobuf_test_custom.Uint128 `protobuf:"bytes,2,rep,name=G,customtype=github.com/waynz0r/protobuf/test/custom.Uint128" json:"G"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *B) Reset()      { *m = B{} }
func (*B) ProtoMessage() {}
func (*B) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{1}
}
func (m *B) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *B) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_B.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *B) XXX_Merge(src proto.Message) {
	xxx_messageInfo_B.Merge(m, src)
}
func (m *B) XXX_Size() int {
	return m.Size()
}
func (m *B) XXX_DiscardUnknown() {
	xxx_messageInfo_B.DiscardUnknown(m)
}

var xxx_messageInfo_B proto.InternalMessageInfo

type C struct {
	MySize               *int64   `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C) Reset()      { *m = C{} }
func (*C) ProtoMessage() {}
func (*C) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{2}
}
func (m *C) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C.Merge(m, src)
}
func (m *C) XXX_Size() int {
	return m.Size()
}
func (m *C) XXX_DiscardUnknown() {
	xxx_messageInfo_C.DiscardUnknown(m)
}

var xxx_messageInfo_C proto.InternalMessageInfo

func (m *C) GetMySize() int64 {
	if m != nil && m.MySize != nil {
		return *m.MySize
	}
	return 0
}

type U struct {
	A                    *A       `protobuf:"bytes,1,opt,name=A" json:"A,omitempty"`
	B                    *B       `protobuf:"bytes,2,opt,name=B" json:"B,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *U) Reset()      { *m = U{} }
func (*U) ProtoMessage() {}
func (*U) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{3}
}
func (m *U) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *U) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_U.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *U) XXX_Merge(src proto.Message) {
	xxx_messageInfo_U.Merge(m, src)
}
func (m *U) XXX_Size() int {
	return m.Size()
}
func (m *U) XXX_DiscardUnknown() {
	xxx_messageInfo_U.DiscardUnknown(m)
}

var xxx_messageInfo_U proto.InternalMessageInfo

func (m *U) GetA() *A {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *U) GetB() *B {
	if m != nil {
		return m.B
	}
	return nil
}

type E struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_extensions       []byte   `protobuf:"bytes,0,opt" json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *E) Reset()      { *m = E{} }
func (*E) ProtoMessage() {}
func (*E) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{4}
}

var extRange_E = []proto.ExtensionRange{
	{Start: 1, End: 536870911},
}

func (*E) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_E
}

func (m *E) GetExtensions() *[]byte {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make([]byte, 0)
	}
	return &m.XXX_extensions
}
func (m *E) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E.Merge(m, src)
}
func (m *E) XXX_Size() int {
	return m.Size()
}
func (m *E) XXX_DiscardUnknown() {
	xxx_messageInfo_E.DiscardUnknown(m)
}

var xxx_messageInfo_E proto.InternalMessageInfo

type R struct {
	Recognized           *uint32  `protobuf:"varint,1,opt,name=recognized" json:"recognized,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *R) Reset()      { *m = R{} }
func (*R) ProtoMessage() {}
func (*R) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{5}
}
func (m *R) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *R) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_R.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *R) XXX_Merge(src proto.Message) {
	xxx_messageInfo_R.Merge(m, src)
}
func (m *R) XXX_Size() int {
	return m.Size()
}
func (m *R) XXX_DiscardUnknown() {
	xxx_messageInfo_R.DiscardUnknown(m)
}

var xxx_messageInfo_R proto.InternalMessageInfo

func (m *R) GetRecognized() uint32 {
	if m != nil && m.Recognized != nil {
		return *m.Recognized
	}
	return 0
}

type CastType struct {
	Int32                *int32   `protobuf:"varint,1,opt,name=Int32,casttype=int32" json:"Int32,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CastType) Reset()      { *m = CastType{} }
func (*CastType) ProtoMessage() {}
func (*CastType) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{6}
}
func (m *CastType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CastType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CastType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CastType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CastType.Merge(m, src)
}
func (m *CastType) XXX_Size() int {
	return m.Size()
}
func (m *CastType) XXX_DiscardUnknown() {
	xxx_messageInfo_CastType.DiscardUnknown(m)
}

var xxx_messageInfo_CastType proto.InternalMessageInfo

func (m *CastType) GetInt32() int32 {
	if m != nil && m.Int32 != nil {
		return *m.Int32
	}
	return 0
}

func init() {
	proto.RegisterType((*A)(nil), "test.A")
	proto.RegisterType((*B)(nil), "test.B")
	proto.RegisterType((*C)(nil), "test.C")
	proto.RegisterType((*U)(nil), "test.U")
	proto.RegisterType((*E)(nil), "test.E")
	proto.RegisterType((*R)(nil), "test.R")
	proto.RegisterType((*CastType)(nil), "test.CastType")
}

func init() { proto.RegisterFile("example.proto", fileDescriptor_15a1dc8d40dadaa6) }

var fileDescriptor_15a1dc8d40dadaa6 = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x4d, 0x6b, 0x13, 0x41,
	0x18, 0xc7, 0xf3, 0x6c, 0xb6, 0x75, 0xfb, 0xb4, 0x05, 0x19, 0x29, 0x04, 0x91, 0x99, 0x10, 0x51,
	0xe2, 0xdb, 0x6e, 0x8d, 0x87, 0xca, 0x82, 0x87, 0x4c, 0x2d, 0x25, 0x07, 0x3d, 0x8c, 0xe6, 0x03,
	0xe4, 0x65, 0x8c, 0x03, 0x66, 0x37, 0xee, 0xce, 0xa2, 0xc9, 0x69, 0x8f, 0x9e, 0xfd, 0x04, 0xf5,
	0xd6, 0x8f, 0xe0, 0xd1, 0x63, 0x8e, 0x39, 0x8a, 0x87, 0xa5, 0xd9, 0x4f, 0xd0, 0xa3, 0x78, 0x92,
	0x99, 0x2e, 0x12, 0x10, 0xf4, 0x36, 0xf3, 0x7b, 0x9e, 0xf9, 0xff, 0x7f, 0x0c, 0xee, 0xcb, 0x8f,
	0x83, 0xe9, 0xec, 0x9d, 0xf4, 0x67, 0x49, 0xac, 0x63, 0xe2, 0x6a, 0x99, 0xea, 0x9b, 0x87, 0x13,
	0xa5, 0xdf, 0x66, 0x43, 0x7f, 0x14, 0x4f, 0x83, 0x0f, 0x83, 0x79, 0xb4, 0x38, 0x4c, 0x02, 0x3b,
	0x1f, 0x66, 0x6f, 0x82, 0x49, 0x3c, 0x89, 0xed, 0xc5, 0x9e, 0xae, 0xde, 0xb5, 0x3e, 0x03, 0x42,
	0x97, 0xdc, 0xc5, 0xdd, 0xe7, 0x32, 0x1d, 0x25, 0x6a, 0xa6, 0x55, 0x1c, 0x35, 0xa0, 0x09, 0xed,
	0x1d, 0xee, 0x2e, 0x0b, 0x56, 0x13, 0x9b, 0x03, 0x72, 0x0b, 0xb7, 0x5f, 0x66, 0xd3, 0xa1, 0x4c,
	0x1a, 0x4e, 0x13, 0xda, 0xf5, 0x6a, 0xa5, 0x62, 0xe4, 0x19, 0x3a, 0xbd, 0x71, 0xa3, 0xde, 0x84,
	0xf6, 0x1e, 0x7f, 0x64, 0x26, 0x3f, 0x0a, 0x76, 0xe7, 0x5f, 0x46, 0xc6, 0xd9, 0xef, 0x67, 0x6a,
	0x2c, 0x9c, 0xde, 0x38, 0xf4, 0x3e, 0x9d, 0xb1, 0xda, 0xf9, 0x19, 0x83, 0xd6, 0x7b, 0x04, 0x4e,
	0x18, 0x42, 0xd7, 0x9a, 0xec, 0x76, 0xae, 0xf9, 0x76, 0xb3, 0xcb, 0x3d, 0x93, 0xba, 0x2a, 0x18,
	0x08, 0xe8, 0x92, 0x13, 0x84, 0xd3, 0x86, 0xd3, 0xac, 0xb7, 0xf7, 0xf8, 0x51, 0xd5, 0x16, 0xfc,
	0xaf, 0x2d, 0x18, 0x65, 0xa9, 0x8e, 0xa7, 0x7e, 0x5f, 0x45, 0xfa, 0x71, 0xe7, 0xa9, 0x80, 0xd3,
	0xd0, 0xbd, 0x34, 0x95, 0xb7, 0x11, 0x8e, 0x09, 0x45, 0x37, 0x55, 0x0b, 0x69, 0x5b, 0xeb, 0x1c,
	0xcb, 0x82, 0x6d, 0xbf, 0x98, 0xbf, 0x52, 0x0b, 0x29, 0x2c, 0x6f, 0x1d, 0x21, 0xf4, 0xc9, 0xc1,
	0xdf, 0x5e, 0xc6, 0xe6, 0x00, 0x81, 0xdb, 0x5f, 0xf9, 0x83, 0xb9, 0x00, 0x1e, 0xba, 0x4b, 0x93,
	0x7e, 0x03, 0xe1, 0xe4, 0xbe, 0xe7, 0xc1, 0xf5, 0x3c, 0xcf, 0x73, 0x27, 0x74, 0x97, 0x5f, 0x58,
	0xad, 0x75, 0x0f, 0x41, 0x10, 0x8a, 0x98, 0xc8, 0x51, 0x3c, 0x89, 0xd4, 0x42, 0x8e, 0x6d, 0xec,
	0xbe, 0xd8, 0x20, 0xa1, 0xbb, 0x32, 0xab, 0x0f, 0xd0, 0x3b, 0x1e, 0xa4, 0xfa, 0xf5, 0x7c, 0x26,
	0x09, 0xc3, 0xad, 0x5e, 0xa4, 0x9f, 0x74, 0x2a, 0xcb, 0x9d, 0x5f, 0x05, 0xdb, 0x52, 0x06, 0x88,
	0x2b, 0xce, 0x1f, 0x7e, 0x5f, 0xd3, 0xda, 0xc5, 0x9a, 0xc2, 0xe5, 0x9a, 0xc2, 0xcf, 0x35, 0x85,
	0xbc, 0xa4, 0x70, 0x5e, 0x52, 0xf8, 0x5a, 0x52, 0xf8, 0x56, 0x52, 0x58, 0x96, 0x14, 0x56, 0x25,
	0x85, 0x8b, 0x92, 0xc2, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x4c, 0x93, 0xb7, 0x48, 0x02,
	0x00, 0x00,
}

func (this *B) Description() (desc *github_com_waynz0r_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return ExampleDescription()
}
func ExampleDescription() (desc *github_com_waynz0r_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_waynz0r_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 4107 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0x59, 0x70, 0x1c, 0xd7,
		0x75, 0x65, 0xcf, 0x02, 0xcc, 0xdc, 0x19, 0x0c, 0x1a, 0x0f, 0x20, 0x39, 0x84, 0x24, 0x80, 0x84,
		0x36, 0x90, 0x94, 0x40, 0x85, 0xe2, 0xa6, 0x66, 0x64, 0x65, 0x66, 0x30, 0x84, 0x46, 0xc1, 0xe6,
		0x06, 0xc6, 0x5a, 0x5c, 0xa9, 0xae, 0x46, 0xcf, 0xc3, 0xa0, 0xc9, 0x9e, 0xee, 0x56, 0x77, 0x0f,
		0x49, 0xb0, 0xf2, 0xc1, 0x94, 0xb2, 0xb9, 0xb2, 0x3b, 0xa9, 0x8a, 0xad, 0xc8, 0x8a, 0xe4, 0x54,
		0x22, 0xc5, 0x71, 0x16, 0x67, 0x71, 0x6c, 0xe7, 0xc7, 0x3f, 0x4e, 0xf8, 0x95, 0x92, 0xff, 0x52,
		0xa9, 0x14, 0x4b, 0x62, 0x54, 0x95, 0x4d, 0x49, 0x94, 0x84, 0x1f, 0xae, 0xe8, 0xc7, 0xf5, 0xb6,
		0x9e, 0x9e, 0x05, 0xec, 0x81, 0xab, 0x24, 0x7d, 0x01, 0x7d, 0xdf, 0x3d, 0xa7, 0xef, 0xbb, 0xef,
		0xbe, 0x7b, 0xef, 0x7b, 0x3d, 0x70, 0x4b, 0x81, 0xa3, 0x4d, 0xc7, 0x69, 0x5a, 0xf8, 0x94, 0xeb,
		0x39, 0x81, 0xb3, 0xd5, 0xde, 0x3e, 0xd5, 0xc0, 0xbe, 0xe1, 0x99, 0x6e, 0xe0, 0x78, 0x0b, 0x54,
		0x86, 0xc6, 0x99, 0xc6, 0x82, 0xd0, 0x98, 0x5b, 0x81, 0x89, 0x4b, 0xa6, 0x85, 0x17, 0x43, 0xc5,
		0x0d, 0x1c, 0xa0, 0x0b, 0x90, 0xda, 0x36, 0x2d, 0x5c, 0x94, 0x8e, 0x26, 0xe7, 0x73, 0xa7, 0x1f,
		0x5a, 0xe8, 0x01, 0x2d, 0x74, 0x23, 0xd6, 0x89, 0x58, 0xa5, 0x88, 0xb9, 0xf7, 0x53, 0x30, 0x39,
		0x60, 0x14, 0x21, 0x48, 0xd9, 0x7a, 0x8b, 0x30, 0x4a, 0xf3, 0x59, 0x95, 0xfe, 0x8f, 0x8a, 0x30,
		0xea, 0xea, 0xc6, 0x15, 0xbd, 0x89, 0x8b, 0x09, 0x2a, 0x16, 0x8f, 0x68, 0x06, 0xa0, 0x81, 0x5d,
		0x6c, 0x37, 0xb0, 0x6d, 0xec, 0x16, 0x93, 0x47, 0x93, 0xf3, 0x59, 0x35, 0x22, 0x41, 0x27, 0x61,
		0xc2, 0x6d, 0x6f, 0x59, 0xa6, 0xa1, 0x45, 0xd4, 0xe0, 0x68, 0x72, 0x3e, 0xad, 0xca, 0x6c, 0x60,
		0xb1, 0xa3, 0xfc, 0x28, 0x8c, 0x5f, 0xc3, 0xfa, 0x95, 0xa8, 0x6a, 0x8e, 0xaa, 0x16, 0x88, 0x38,
		0xa2, 0x58, 0x81, 0x7c, 0x0b, 0xfb, 0xbe, 0xde, 0xc4, 0x5a, 0xb0, 0xeb, 0xe2, 0x62, 0x8a, 0xce,
		0xfe, 0x68, 0xdf, 0xec, 0x7b, 0x67, 0x9e, 0xe3, 0xa8, 0xcd, 0x5d, 0x17, 0xa3, 0x12, 0x64, 0xb1,
		0xdd, 0x6e, 0x31, 0x86, 0xf4, 0x1e, 0xfe, 0xab, 0xda, 0xed, 0x56, 0x2f, 0x4b, 0x86, 0xc0, 0x38,
		0xc5, 0xa8, 0x8f, 0xbd, 0xab, 0xa6, 0x81, 0x8b, 0x23, 0x94, 0xe0, 0xd1, 0x3e, 0x82, 0x0d, 0x36,
		0xde, 0xcb, 0x21, 0x70, 0xa8, 0x02, 0x59, 0x7c, 0x3d, 0xc0, 0xb6, 0x6f, 0x3a, 0x76, 0x71, 0x94,
		0x92, 0x3c, 0x3c, 0x60, 0x15, 0xb1, 0xd5, 0xe8, 0xa5, 0xe8, 0xe0, 0xd0, 0x39, 0x18, 0x75, 0xdc,
		0xc0, 0x74, 0x6c, 0xbf, 0x98, 0x39, 0x2a, 0xcd, 0xe7, 0x4e, 0xdf, 0x3f, 0x30, 0x10, 0xd6, 0x98,
		0x8e, 0x2a, 0x94, 0x51, 0x0d, 0x64, 0xdf, 0x69, 0x7b, 0x06, 0xd6, 0x0c, 0xa7, 0x81, 0x35, 0xd3,
		0xde, 0x76, 0x8a, 0x59, 0x4a, 0x30, 0xdb, 0x3f, 0x11, 0xaa, 0x58, 0x71, 0x1a, 0xb8, 0x66, 0x6f,
		0x3b, 0x6a, 0xc1, 0xef, 0x7a, 0x46, 0x87, 0x60, 0xc4, 0xdf, 0xb5, 0x03, 0xfd, 0x7a, 0x31, 0x4f,
		0x23, 0x84, 0x3f, 0xcd, 0x7d, 0x7b, 0x04, 0xc6, 0x87, 0x09, 0xb1, 0x8b, 0x90, 0xde, 0x26, 0xb3,
		0x2c, 0x26, 0xf6, 0xe3, 0x03, 0x86, 0xe9, 0x76, 0xe2, 0xc8, 0x8f, 0xe8, 0xc4, 0x12, 0xe4, 0x6c,
		0xec, 0x07, 0xb8, 0xc1, 0x22, 0x22, 0x39, 0x64, 0x4c, 0x01, 0x03, 0xf5, 0x87, 0x54, 0xea, 0x47,
		0x0a, 0xa9, 0x17, 0x60, 0x3c, 0x34, 0x49, 0xf3, 0x74, 0xbb, 0x29, 0x62, 0xf3, 0x54, 0x9c, 0x25,
		0x0b, 0x55, 0x81, 0x53, 0x09, 0x4c, 0x2d, 0xe0, 0xae, 0x67, 0xb4, 0x08, 0xe0, 0xd8, 0xd8, 0xd9,
		0xd6, 0x1a, 0xd8, 0xb0, 0x8a, 0x99, 0x3d, 0xbc, 0xb4, 0x46, 0x54, 0xfa, 0xbc, 0xe4, 0x30, 0xa9,
		0x61, 0xa1, 0xa7, 0x3a, 0xa1, 0x36, 0xba, 0x47, 0xa4, 0xac, 0xb0, 0x4d, 0xd6, 0x17, 0x6d, 0x75,
		0x28, 0x78, 0x98, 0xc4, 0x3d, 0x6e, 0xf0, 0x99, 0x65, 0xa9, 0x11, 0x0b, 0xb1, 0x33, 0x53, 0x39,
		0x8c, 0x4d, 0x6c, 0xcc, 0x8b, 0x3e, 0xa2, 0x07, 0x21, 0x14, 0x68, 0x34, 0xac, 0x80, 0x66, 0xa1,
		0xbc, 0x10, 0xae, 0xea, 0x2d, 0x3c, 0x7d, 0x03, 0x0a, 0xdd, 0xee, 0x41, 0x53, 0x90, 0xf6, 0x03,
		0xdd, 0x0b, 0x68, 0x14, 0xa6, 0x55, 0xf6, 0x80, 0x64, 0x48, 0x62, 0xbb, 0x41, 0xb3, 0x5c, 0x5a,
		0x25, 0xff, 0xa2, 0x9f, 0xe8, 0x4c, 0x38, 0x49, 0x27, 0xfc, 0x48, 0xff, 0x8a, 0x76, 0x31, 0xf7,
		0xce, 0x7b, 0xfa, 0x3c, 0x8c, 0x75, 0x4d, 0x60, 0xd8, 0x57, 0xcf, 0xfd, 0x34, 0x1c, 0x1c, 0x48,
		0x8d, 0x5e, 0x80, 0xa9, 0xb6, 0x6d, 0xda, 0x01, 0xf6, 0x5c, 0x0f, 0x93, 0x88, 0x65, 0xaf, 0x2a,
		0xfe, 0xcb, 0xe8, 0x1e, 0x31, 0x57, 0x8f, 0x6a, 0x33, 0x16, 0x75, 0xb2, 0xdd, 0x2f, 0x3c, 0x91,
		0xcd, 0xfc, 0xeb, 0xa8, 0x7c, 0xf3, 0xe6, 0xcd, 0x9b, 0x89, 0xb9, 0x2f, 0x8d, 0xc0, 0xd4, 0xa0,
		0x3d, 0x33, 0x70, 0xfb, 0x1e, 0x82, 0x11, 0xbb, 0xdd, 0xda, 0xc2, 0x1e, 0x75, 0x52, 0x5a, 0xe5,
		0x4f, 0xa8, 0x04, 0x69, 0x4b, 0xdf, 0xc2, 0x56, 0x31, 0x75, 0x54, 0x9a, 0x2f, 0x9c, 0x3e, 0x39,
		0xd4, 0xae, 0x5c, 0x58, 0x26, 0x10, 0x95, 0x21, 0xd1, 0x67, 0x20, 0xc5, 0x53, 0x34, 0x61, 0x38,
		0x31, 0x1c, 0x03, 0xd9, 0x4b, 0x2a, 0xc5, 0xa1, 0xfb, 0x20, 0x4b, 0xfe, 0xb2, 0xd8, 0x18, 0xa1,
		0x36, 0x67, 0x88, 0x80, 0xc4, 0x05, 0x9a, 0x86, 0x0c, 0xdd, 0x26, 0x0d, 0x2c, 0x4a, 0x5b, 0xf8,
		0x4c, 0x02, 0xab, 0x81, 0xb7, 0xf5, 0xb6, 0x15, 0x68, 0x57, 0x75, 0xab, 0x8d, 0x69, 0xc0, 0x67,
		0xd5, 0x3c, 0x17, 0x7e, 0x8e, 0xc8, 0xd0, 0x2c, 0xe4, 0xd8, 0xae, 0x32, 0xed, 0x06, 0xbe, 0x4e,
		0xb3, 0x67, 0x5a, 0x65, 0x1b, 0xad, 0x46, 0x24, 0xe4, 0xf5, 0x97, 0x7d, 0xc7, 0x16, 0xa1, 0x49,
		0x5f, 0x41, 0x04, 0xf4, 0xf5, 0xe7, 0x7b, 0x13, 0xf7, 0x03, 0x83, 0xa7, 0xd7, 0x1b, 0x53, 0x73,
		0xdf, 0x4c, 0x40, 0x8a, 0xe6, 0x8b, 0x71, 0xc8, 0x6d, 0xbe, 0xb8, 0x5e, 0xd5, 0x16, 0xd7, 0xea,
		0xe5, 0xe5, 0xaa, 0x2c, 0xa1, 0x02, 0x00, 0x15, 0x5c, 0x5a, 0x5e, 0x2b, 0x6d, 0xca, 0x89, 0xf0,
		0xb9, 0xb6, 0xba, 0x79, 0xee, 0x8c, 0x9c, 0x0c, 0x01, 0x75, 0x26, 0x48, 0x45, 0x15, 0x9e, 0x3c,
		0x2d, 0xa7, 0x91, 0x0c, 0x79, 0x46, 0x50, 0x7b, 0xa1, 0xba, 0x78, 0xee, 0x8c, 0x3c, 0xd2, 0x2d,
		0x79, 0xf2, 0xb4, 0x3c, 0x8a, 0xc6, 0x20, 0x4b, 0x25, 0xe5, 0xb5, 0xb5, 0x65, 0x39, 0x13, 0x72,
		0x6e, 0x6c, 0xaa, 0xb5, 0xd5, 0x25, 0x39, 0x1b, 0x72, 0x2e, 0xa9, 0x6b, 0xf5, 0x75, 0x19, 0x42,
		0x86, 0x95, 0xea, 0xc6, 0x46, 0x69, 0xa9, 0x2a, 0xe7, 0x42, 0x8d, 0xf2, 0x8b, 0x9b, 0xd5, 0x0d,
		0x39, 0xdf, 0x65, 0xd6, 0x93, 0xa7, 0xe5, 0xb1, 0xf0, 0x15, 0xd5, 0xd5, 0xfa, 0x8a, 0x5c, 0x40,
		0x13, 0x30, 0xc6, 0x5e, 0x21, 0x8c, 0x18, 0xef, 0x11, 0x9d, 0x3b, 0x23, 0xcb, 0x1d, 0x43, 0x18,
		0xcb, 0x44, 0x97, 0xe0, 0xdc, 0x19, 0x19, 0xcd, 0x55, 0x20, 0x4d, 0xa3, 0x0b, 0x21, 0x28, 0x2c,
		0x97, 0xca, 0xd5, 0x65, 0x6d, 0x6d, 0x7d, 0xb3, 0xb6, 0xb6, 0x5a, 0x5a, 0x96, 0xa5, 0x8e, 0x4c,
		0xad, 0x7e, 0xb6, 0x5e, 0x53, 0xab, 0x8b, 0x72, 0x22, 0x2a, 0x5b, 0xaf, 0x96, 0x36, 0xab, 0x8b,
		0x72, 0x72, 0xce, 0x80, 0xa9, 0x41, 0x79, 0x72, 0xe0, 0xce, 0x88, 0x2c, 0x71, 0x62, 0x8f, 0x25,
		0xa6, 0x5c, 0x7d, 0x4b, 0xfc, 0xcf, 0x09, 0x98, 0x1c, 0x50, 0x2b, 0x06, 0xbe, 0xe4, 0x19, 0x48,
		0xb3, 0x10, 0x65, 0xd5, 0xf3, 0xf8, 0xc0, 0xa2, 0x43, 0x03, 0xb6, 0xaf, 0x82, 0x52, 0x5c, 0xb4,
		0x83, 0x48, 0xee, 0xd1, 0x41, 0x10, 0x8a, 0xbe, 0x9c, 0xfe, 0x53, 0x7d, 0x39, 0x9d, 0x95, 0xbd,
		0x73, 0xc3, 0x94, 0x3d, 0x2a, 0xdb, 0x5f, 0x6e, 0x4f, 0x0f, 0xc8, 0xed, 0x17, 0x61, 0xa2, 0x8f,
		0x68, 0xe8, 0x1c, 0xfb, 0x8a, 0x04, 0xc5, 0xbd, 0x9c, 0x13, 0x93, 0xe9, 0x12, 0x5d, 0x99, 0xee,
		0x62, 0xaf, 0x07, 0x8f, 0xed, 0xbd, 0x08, 0x7d, 0x6b, 0xfd, 0x96, 0x04, 0x87, 0x06, 0x77, 0x8a,
		0x03, 0x6d, 0xf8, 0x0c, 0x8c, 0xb4, 0x70, 0xb0, 0xe3, 0x88, 0x6e, 0xe9, 0x91, 0x01, 0x35, 0x98,
		0x0c, 0xf7, 0x2e, 0x36, 0x47, 0x45, 0x8b, 0x78, 0x72, 0xaf, 0x76, 0x8f, 0x59, 0xd3, 0x67, 0xe9,
		0x17, 0x12, 0x70, 0x70, 0x20, 0xf9, 0x40, 0x43, 0x1f, 0x00, 0x30, 0x6d, 0xb7, 0x1d, 0xb0, 0x8e,
		0x88, 0x25, 0xd8, 0x2c, 0x95, 0xd0, 0xe4, 0x45, 0x92, 0x67, 0x3b, 0x08, 0xc7, 0x93, 0x74, 0x1c,
		0x98, 0x88, 0x2a, 0x5c, 0xe8, 0x18, 0x9a, 0xa2, 0x86, 0xce, 0xec, 0x31, 0xd3, 0xbe, 0xc0, 0x7c,
		0x02, 0x64, 0xc3, 0x32, 0xb1, 0x1d, 0x68, 0x7e, 0xe0, 0x61, 0xbd, 0x65, 0xda, 0x4d, 0x5a, 0x41,
		0x32, 0x4a, 0x7a, 0x5b, 0xb7, 0x7c, 0xac, 0x8e, 0xb3, 0xe1, 0x0d, 0x31, 0x4a, 0x10, 0x34, 0x80,
		0xbc, 0x08, 0x62, 0xa4, 0x0b, 0xc1, 0x86, 0x43, 0xc4, 0xdc, 0x2f, 0x67, 0x21, 0x17, 0xe9, 0xab,
		0xd1, 0x31, 0xc8, 0x5f, 0xd6, 0xaf, 0xea, 0x9a, 0x38, 0x2b, 0x31, 0x4f, 0xe4, 0x88, 0x6c, 0x9d,
		0x9f, 0x97, 0x9e, 0x80, 0x29, 0xaa, 0xe2, 0xb4, 0x03, 0xec, 0x69, 0x86, 0xa5, 0xfb, 0x3e, 0x75,
		0x5a, 0x86, 0xaa, 0x22, 0x32, 0xb6, 0x46, 0x86, 0x2a, 0x62, 0x04, 0x9d, 0x85, 0x49, 0x8a, 0x68,
		0xb5, 0xad, 0xc0, 0x74, 0x2d, 0xac, 0x91, 0xd3, 0x9b, 0x4f, 0x2b, 0x49, 0x68, 0xd9, 0x04, 0xd1,
		0x58, 0xe1, 0x0a, 0xc4, 0x22, 0x1f, 0x2d, 0xc2, 0x03, 0x14, 0xd6, 0xc4, 0x36, 0xf6, 0xf4, 0x00,
		0x6b, 0xf8, 0xe5, 0xb6, 0x6e, 0xf9, 0x9a, 0x6e, 0x37, 0xb4, 0x1d, 0xdd, 0xdf, 0x29, 0x4e, 0x11,
		0x82, 0x72, 0xa2, 0x28, 0xa9, 0x47, 0x88, 0xe2, 0x12, 0xd7, 0xab, 0x52, 0xb5, 0x92, 0xdd, 0x78,
		0x56, 0xf7, 0x77, 0x90, 0x02, 0x87, 0x28, 0x8b, 0x1f, 0x78, 0xa6, 0xdd, 0xd4, 0x8c, 0x1d, 0x6c,
		0x5c, 0xd1, 0xda, 0xc1, 0xf6, 0x85, 0xe2, 0x7d, 0xd1, 0xf7, 0x53, 0x0b, 0x37, 0xa8, 0x4e, 0x85,
		0xa8, 0xd4, 0x83, 0xed, 0x0b, 0x68, 0x03, 0xf2, 0x64, 0x31, 0x5a, 0xe6, 0x0d, 0xac, 0x6d, 0x3b,
		0x1e, 0x2d, 0x8d, 0x85, 0x01, 0xa9, 0x29, 0xe2, 0xc1, 0x85, 0x35, 0x0e, 0x58, 0x71, 0x1a, 0x58,
		0x49, 0x6f, 0xac, 0x57, 0xab, 0x8b, 0x6a, 0x4e, 0xb0, 0x5c, 0x72, 0x3c, 0x12, 0x50, 0x4d, 0x27,
		0x74, 0x70, 0x8e, 0x05, 0x54, 0xd3, 0x11, 0xee, 0x3d, 0x0b, 0x93, 0x86, 0xc1, 0xe6, 0x6c, 0x1a,
		0x1a, 0x3f, 0x63, 0xf9, 0x45, 0xb9, 0xcb, 0x59, 0x86, 0xb1, 0xc4, 0x14, 0x78, 0x8c, 0xfb, 0xe8,
		0x29, 0x38, 0xd8, 0x71, 0x56, 0x14, 0x38, 0xd1, 0x37, 0xcb, 0x5e, 0xe8, 0x59, 0x98, 0x74, 0x77,
		0xfb, 0x81, 0xa8, 0xeb, 0x8d, 0xee, 0x6e, 0x2f, 0xec, 0x3c, 0x4c, 0xb9, 0x3b, 0x6e, 0x3f, 0xee,
		0x44, 0x14, 0x87, 0xdc, 0x1d, 0xb7, 0x17, 0xf8, 0x30, 0x3d, 0x70, 0x7b, 0xd8, 0xd0, 0x03, 0xdc,
		0x28, 0x1e, 0x8e, 0xaa, 0x47, 0x06, 0xd0, 0x29, 0x90, 0x0d, 0x43, 0xc3, 0xb6, 0xbe, 0x65, 0x61,
		0x4d, 0xf7, 0xb0, 0xad, 0xfb, 0xc5, 0xd9, 0xa8, 0x72, 0xc1, 0x30, 0xaa, 0x74, 0xb4, 0x44, 0x07,
		0xd1, 0x09, 0x98, 0x70, 0xb6, 0x2e, 0x1b, 0x2c, 0x24, 0x35, 0xd7, 0xc3, 0xdb, 0xe6, 0xf5, 0xe2,
		0x43, 0xd4, 0xbf, 0xe3, 0x64, 0x80, 0x06, 0xe4, 0x3a, 0x15, 0xa3, 0xe3, 0x20, 0x1b, 0xfe, 0x8e,
		0xee, 0xb9, 0x34, 0x27, 0xfb, 0xae, 0x6e, 0xe0, 0xe2, 0xc3, 0x4c, 0x95, 0xc9, 0x57, 0x85, 0x98,
		0x6c, 0x09, 0xff, 0x9a, 0xb9, 0x1d, 0x08, 0xc6, 0x47, 0xd9, 0x96, 0xa0, 0x32, 0xce, 0x36, 0x0f,
		0x32, 0x71, 0x45, 0xd7, 0x8b, 0xe7, 0xa9, 0x5a, 0xc1, 0xdd, 0x71, 0xa3, 0xef, 0x7d, 0x10, 0xc6,
		0x88, 0x66, 0xe7, 0xa5, 0xc7, 0x59, 0x43, 0xe6, 0xee, 0x44, 0xde, 0x78, 0x06, 0x0e, 0x11, 0xa5,
		0x16, 0x0e, 0xf4, 0x86, 0x1e, 0xe8, 0x11, 0xed, 0xc7, 0xa8, 0x36, 0xf1, 0xfb, 0x0a, 0x1f, 0xec,
		0xb2, 0xd3, 0x6b, 0x6f, 0xed, 0x86, 0x91, 0xf5, 0x38, 0xb3, 0x93, 0xc8, 0x44, 0x6c, 0x7d, 0x6c,
		0x4d, 0xf7, 0x9c, 0x02, 0xf9, 0x68, 0xe0, 0xa3, 0x2c, 0xb0, 0xd0, 0x97, 0x25, 0xd2, 0x05, 0x55,
		0xd6, 0x16, 0x49, 0xff, 0xf2, 0x52, 0x55, 0x4e, 0x90, 0x3e, 0x6a, 0xb9, 0xb6, 0x59, 0xd5, 0xd4,
		0xfa, 0xea, 0x66, 0x6d, 0xa5, 0x2a, 0x27, 0xa3, 0x0d, 0xfb, 0xf7, 0x12, 0x50, 0xe8, 0x3e, 0x7b,
		0xa1, 0x1f, 0x87, 0xc3, 0xe2, 0xa2, 0xc4, 0xc7, 0x81, 0x76, 0xcd, 0xf4, 0xe8, 0x5e, 0x6c, 0xe9,
		0xac, 0x2e, 0x86, 0xd1, 0x30, 0xc5, 0xb5, 0x36, 0x70, 0xf0, 0xbc, 0xe9, 0x91, 0x9d, 0xd6, 0xd2,
		0x03, 0xb4, 0x0c, 0xb3, 0xb6, 0xa3, 0xf9, 0x81, 0x6e, 0x37, 0x74, 0xaf, 0xa1, 0x75, 0xae, 0xa8,
		0x34, 0xdd, 0x30, 0xb0, 0xef, 0x3b, 0xac, 0x06, 0x86, 0x2c, 0xf7, 0xdb, 0xce, 0x06, 0x57, 0xee,
		0x14, 0x87, 0x12, 0x57, 0xed, 0x89, 0xdc, 0xe4, 0x5e, 0x91, 0x7b, 0x1f, 0x64, 0x5b, 0xba, 0xab,
		0x61, 0x3b, 0xf0, 0x76, 0x69, 0xc7, 0x9d, 0x51, 0x33, 0x2d, 0xdd, 0xad, 0x92, 0xe7, 0x4f, 0xe6,
		0xe0, 0xf3, 0x4f, 0x49, 0xc8, 0x47, 0xbb, 0x6e, 0x72, 0x88, 0x31, 0x68, 0x81, 0x92, 0x68, 0x0a,
		0x7b, 0xf0, 0x9e, 0x3d, 0xfa, 0x42, 0x85, 0x54, 0x2e, 0x65, 0x84, 0xf5, 0xc2, 0x2a, 0x43, 0x92,
		0xae, 0x81, 0x84, 0x16, 0x66, 0xbd, 0x47, 0x46, 0xe5, 0x4f, 0x68, 0x09, 0x46, 0x2e, 0xfb, 0x94,
		0x7b, 0x84, 0x72, 0x3f, 0x74, 0x6f, 0xee, 0xe7, 0x36, 0x28, 0x79, 0xf6, 0xb9, 0x0d, 0x6d, 0x75,
		0x4d, 0x5d, 0x29, 0x2d, 0xab, 0x1c, 0x8e, 0x8e, 0x40, 0xca, 0xd2, 0x6f, 0xec, 0x76, 0xd7, 0x38,
		0x2a, 0x1a, 0xd6, 0xf1, 0x47, 0x20, 0x75, 0x0d, 0xeb, 0x57, 0xba, 0x2b, 0x0b, 0x15, 0x7d, 0x8c,
		0xa1, 0x7f, 0x0a, 0xd2, 0xd4, 0x5f, 0x08, 0x80, 0x7b, 0x4c, 0x3e, 0x80, 0x32, 0x90, 0xaa, 0xac,
		0xa9, 0x24, 0xfc, 0x65, 0xc8, 0x33, 0xa9, 0xb6, 0x5e, 0xab, 0x56, 0xaa, 0x72, 0x62, 0xee, 0x2c,
		0x8c, 0x30, 0x27, 0x90, 0xad, 0x11, 0xba, 0x41, 0x3e, 0xc0, 0x1f, 0x39, 0x87, 0x24, 0x46, 0xeb,
		0x2b, 0xe5, 0xaa, 0x2a, 0x27, 0xa2, 0xcb, 0xeb, 0x43, 0x3e, 0xda, 0x70, 0x7f, 0x32, 0x31, 0xf5,
		0x1d, 0x09, 0x72, 0x91, 0x06, 0x9a, 0x74, 0x3e, 0xba, 0x65, 0x39, 0xd7, 0x34, 0xdd, 0x32, 0x75,
		0x9f, 0x07, 0x05, 0x50, 0x51, 0x89, 0x48, 0x86, 0x5d, 0xb4, 0x4f, 0xc4, 0xf8, 0xd7, 0x25, 0x90,
		0x7b, 0x7b, 0xd7, 0x1e, 0x03, 0xa5, 0x4f, 0xd5, 0xc0, 0xd7, 0x24, 0x28, 0x74, 0x37, 0xac, 0x3d,
		0xe6, 0x1d, 0xfb, 0x54, 0xcd, 0x7b, 0x37, 0x01, 0x63, 0x5d, 0x6d, 0xea, 0xb0, 0xd6, 0xbd, 0x0c,
		0x13, 0x66, 0x03, 0xb7, 0x5c, 0x27, 0xc0, 0xb6, 0xb1, 0xab, 0x59, 0xf8, 0x2a, 0xb6, 0x8a, 0x73,
		0x34, 0x51, 0x9c, 0xba, 0x77, 0x23, 0xbc, 0x50, 0xeb, 0xe0, 0x96, 0x09, 0x4c, 0x99, 0xac, 0x2d,
		0x56, 0x57, 0xd6, 0xd7, 0x36, 0xab, 0xab, 0x95, 0x17, 0xb5, 0xfa, 0xea, 0x4f, 0xae, 0xae, 0x3d,
		0xbf, 0xaa, 0xca, 0x66, 0x8f, 0xda, 0xc7, 0xb8, 0xd5, 0xd7, 0x41, 0xee, 0x35, 0x0a, 0x1d, 0x86,
		0x41, 0x66, 0xc9, 0x07, 0xd0, 0x24, 0x8c, 0xaf, 0xae, 0x69, 0x1b, 0xb5, 0xc5, 0xaa, 0x56, 0xbd,
		0x74, 0xa9, 0x5a, 0xd9, 0xdc, 0x60, 0x57, 0x1b, 0xa1, 0xf6, 0x66, 0xf7, 0xa6, 0x7e, 0x35, 0x09,
		0x93, 0x03, 0x2c, 0x41, 0x25, 0x7e, 0x28, 0x61, 0xe7, 0xa4, 0xc7, 0x87, 0xb1, 0x7e, 0x81, 0x74,
		0x05, 0xeb, 0xba, 0x17, 0xf0, 0x33, 0xcc, 0x71, 0x20, 0x5e, 0xb2, 0x03, 0x73, 0xdb, 0xc4, 0x1e,
		0xbf, 0x09, 0x62, 0x27, 0x95, 0xf1, 0x8e, 0x9c, 0x5d, 0x06, 0x3d, 0x06, 0xc8, 0x75, 0x7c, 0x33,
		0x30, 0xaf, 0x62, 0xcd, 0xb4, 0xc5, 0xb5, 0x11, 0x39, 0xb9, 0xa4, 0x54, 0x59, 0x8c, 0xd4, 0xec,
		0x20, 0xd4, 0xb6, 0x71, 0x53, 0xef, 0xd1, 0x26, 0x09, 0x3c, 0xa9, 0xca, 0x62, 0x24, 0xd4, 0x3e,
		0x06, 0xf9, 0x86, 0xd3, 0x26, 0xed, 0x1c, 0xd3, 0x23, 0xf5, 0x42, 0x52, 0x73, 0x4c, 0x16, 0xaa,
		0xf0, 0x46, 0xbd, 0x73, 0x5f, 0x95, 0x57, 0x73, 0x4c, 0xc6, 0x54, 0x1e, 0x85, 0x71, 0xbd, 0xd9,
		0xf4, 0x08, 0xb9, 0x20, 0x62, 0x47, 0x8f, 0x42, 0x28, 0xa6, 0x8a, 0xd3, 0xcf, 0x41, 0x46, 0xf8,
		0x81, 0x94, 0x64, 0xe2, 0x09, 0xcd, 0x65, 0xe7, 0xe9, 0xc4, 0x7c, 0x56, 0xcd, 0xd8, 0x62, 0xf0,
		0x18, 0xe4, 0x4d, 0x5f, 0xeb, 0x5c, 0xbf, 0x27, 0x8e, 0x26, 0xe6, 0x33, 0x6a, 0xce, 0xf4, 0xc3,
		0xab, 0xcb, 0xb9, 0xb7, 0x12, 0x50, 0xe8, 0xfe, 0x7c, 0x80, 0x16, 0x21, 0x63, 0x39, 0x86, 0x4e,
		0x43, 0x8b, 0x7d, 0xbb, 0x9a, 0x8f, 0xf9, 0xe2, 0xb0, 0xb0, 0xcc, 0xf5, 0xd5, 0x10, 0x39, 0xfd,
		0xf7, 0x12, 0x64, 0x84, 0x18, 0x1d, 0x82, 0x94, 0xab, 0x07, 0x3b, 0x94, 0x2e, 0x5d, 0x4e, 0xc8,
		0x92, 0x4a, 0x9f, 0x89, 0xdc, 0x77, 0x75, 0x9b, 0x86, 0x00, 0x97, 0x93, 0x67, 0xb2, 0xae, 0x16,
		0xd6, 0x1b, 0xf4, 0x5c, 0xe3, 0xb4, 0x5a, 0xd8, 0x0e, 0x7c, 0xb1, 0xae, 0x5c, 0x5e, 0xe1, 0x62,
		0x74, 0x12, 0x26, 0x02, 0x4f, 0x37, 0xad, 0x2e, 0xdd, 0x14, 0xd5, 0x95, 0xc5, 0x40, 0xa8, 0xac,
		0xc0, 0x11, 0xc1, 0xdb, 0xc0, 0x81, 0x6e, 0xec, 0xe0, 0x46, 0x07, 0x34, 0x42, 0xef, 0x2f, 0x0e,
		0x73, 0x85, 0x45, 0x3e, 0x2e, 0xb0, 0x73, 0xdf, 0x97, 0x60, 0x42, 0x9c, 0xc4, 0x1a, 0xa1, 0xb3,
		0x56, 0x00, 0x74, 0xdb, 0x76, 0x82, 0xa8, 0xbb, 0xfa, 0x43, 0xb9, 0x0f, 0xb7, 0x50, 0x0a, 0x41,
		0x6a, 0x84, 0x60, 0xba, 0x05, 0xd0, 0x19, 0xd9, 0xd3, 0x6d, 0xb3, 0x90, 0xe3, 0xdf, 0x86, 0xe8,
		0x07, 0x46, 0x76, 0x76, 0x07, 0x26, 0x22, 0x47, 0x36, 0x34, 0x05, 0xe9, 0x2d, 0xdc, 0x34, 0x6d,
		0x7e, 0xe3, 0xcb, 0x1e, 0xc4, 0x0d, 0x4b, 0x2a, 0xbc, 0x61, 0x29, 0x7f, 0x1e, 0x26, 0x0d, 0xa7,
		0xd5, 0x6b, 0x6e, 0x59, 0xee, 0xb9, 0x3f, 0xf0, 0x9f, 0x95, 0x5e, 0x82, 0x4e, 0x8b, 0xf9, 0x03,
		0x49, 0xfa, 0x6a, 0x22, 0xb9, 0xb4, 0x5e, 0xfe, 0x5a, 0x62, 0x7a, 0x89, 0x41, 0xd7, 0xc5, 0x4c,
		0x55, 0xbc, 0x6d, 0x61, 0x83, 0x58, 0x0f, 0x5f, 0x3f, 0x09, 0x4f, 0x34, 0xcd, 0x60, 0xa7, 0xbd,
		0xb5, 0x60, 0x38, 0xad, 0x53, 0xd7, 0xf4, 0x5d, 0xfb, 0xc6, 0x13, 0x5e, 0xe7, 0xb3, 0x6a, 0xd3,
		0x69, 0x3a, 0xf4, 0x81, 0xfe, 0xc7, 0x3f, 0xad, 0x66, 0x43, 0xe9, 0x74, 0xec, 0x77, 0x58, 0x65,
		0x15, 0x26, 0xb9, 0xb2, 0x46, 0xbf, 0xed, 0xb0, 0x13, 0x0a, 0xba, 0xe7, 0xfd, 0x58, 0xf1, 0x1b,
		0xef, 0xd3, 0x8a, 0xad, 0x4e, 0x70, 0x28, 0x19, 0x63, 0x87, 0x18, 0x45, 0x85, 0x83, 0x5d, 0x7c,
		0x6c, 0x77, 0x62, 0x2f, 0x86, 0xf1, 0x7b, 0x9c, 0x71, 0x32, 0xc2, 0xb8, 0xc1, 0xa1, 0x4a, 0x05,
		0xc6, 0xf6, 0xc3, 0xf5, 0xb7, 0x9c, 0x2b, 0x8f, 0xa3, 0x24, 0x4b, 0x30, 0x4e, 0x49, 0x8c, 0xb6,
		0x1f, 0x38, 0x2d, 0x9a, 0xfa, 0xee, 0x4d, 0xf3, 0x77, 0xef, 0xb3, 0xed, 0x52, 0x20, 0xb0, 0x4a,
		0x88, 0x52, 0x14, 0xa0, 0x9f, 0xb3, 0x1a, 0xd8, 0xb0, 0x62, 0x18, 0x6e, 0x71, 0x43, 0x42, 0x7d,
		0xe5, 0x73, 0x30, 0x45, 0xfe, 0xa7, 0x99, 0x29, 0x6a, 0x49, 0xfc, 0x65, 0x5a, 0xf1, 0xfb, 0xaf,
		0xb0, 0x1d, 0x39, 0x19, 0x12, 0x44, 0x6c, 0x8a, 0xac, 0x62, 0x13, 0x07, 0x01, 0xf6, 0x7c, 0x4d,
		0xb7, 0x06, 0x99, 0x17, 0xb9, 0x8d, 0x28, 0x7e, 0xf9, 0x83, 0xee, 0x55, 0x5c, 0x62, 0xc8, 0x92,
		0x65, 0x29, 0x75, 0x38, 0x3c, 0x20, 0x2a, 0x86, 0xe0, 0x7c, 0x95, 0x73, 0x4e, 0xf5, 0x45, 0x06,
		0xa1, 0x5d, 0x07, 0x21, 0x0f, 0xd7, 0x72, 0x08, 0xce, 0xdf, 0xe1, 0x9c, 0x88, 0x63, 0xc5, 0x92,
		0x12, 0xc6, 0xe7, 0x60, 0xe2, 0x2a, 0xf6, 0xb6, 0x1c, 0x9f, 0xdf, 0x00, 0x0d, 0x41, 0xf7, 0x1a,
		0xa7, 0x1b, 0xe7, 0x40, 0x7a, 0x25, 0x44, 0xb8, 0x9e, 0x82, 0xcc, 0xb6, 0x6e, 0xe0, 0x21, 0x28,
		0xbe, 0xc2, 0x29, 0x46, 0x89, 0x3e, 0x81, 0x96, 0x20, 0xdf, 0x74, 0x78, 0x71, 0x8a, 0x87, 0xbf,
		0xce, 0xe1, 0x39, 0x81, 0xe1, 0x14, 0xae, 0xe3, 0xb6, 0x2d, 0x52, 0xb9, 0xe2, 0x29, 0x7e, 0x57,
		0x50, 0x08, 0x0c, 0xa7, 0xd8, 0x87, 0x5b, 0xdf, 0x10, 0x14, 0x7e, 0xc4, 0x9f, 0xcf, 0x40, 0xce,
		0xb1, 0xad, 0x5d, 0xc7, 0x1e, 0xc6, 0x88, 0x37, 0x39, 0x03, 0x70, 0x08, 0x21, 0xb8, 0x08, 0xd9,
		0x61, 0x17, 0xe2, 0xf7, 0x3f, 0x10, 0xdb, 0x43, 0xac, 0xc0, 0x12, 0x8c, 0x8b, 0x04, 0x65, 0x3a,
		0xf6, 0x10, 0x14, 0x7f, 0xc0, 0x29, 0x0a, 0x11, 0x18, 0x9f, 0x46, 0x80, 0xfd, 0xa0, 0x89, 0x87,
		0x21, 0x79, 0x4b, 0x4c, 0x83, 0x43, 0xb8, 0x2b, 0xb7, 0xb0, 0x6d, 0xec, 0x0c, 0xc7, 0xf0, 0xb6,
		0x70, 0xa5, 0xc0, 0x10, 0x8a, 0x0a, 0x8c, 0xb5, 0x74, 0xcf, 0xdf, 0xd1, 0xad, 0xa1, 0x96, 0xe3,
		0x0f, 0x39, 0x47, 0x3e, 0x04, 0x71, 0x8f, 0xb4, 0xed, 0xfd, 0xd0, 0x7c, 0x4d, 0x78, 0x24, 0x02,
		0xe3, 0x5b, 0xcf, 0x0f, 0xe8, 0x75, 0xd9, 0x7e, 0xd8, 0xfe, 0x48, 0x6c, 0x3d, 0x86, 0x5d, 0x89,
		0x32, 0x5e, 0x84, 0xac, 0x6f, 0xde, 0x18, 0x8a, 0xe6, 0xeb, 0x62, 0xa5, 0x29, 0x80, 0x80, 0x5f,
		0x84, 0x23, 0x03, 0xcb, 0xc4, 0x10, 0x64, 0x7f, 0xcc, 0xc9, 0x0e, 0x0d, 0x28, 0x15, 0x3c, 0x25,
		0xec, 0x97, 0xf2, 0x4f, 0x44, 0x4a, 0xc0, 0x3d, 0x5c, 0xeb, 0xe4, 0xb8, 0xe0, 0xeb, 0xdb, 0xfb,
		0xf3, 0xda, 0x9f, 0x0a, 0xaf, 0x31, 0x6c, 0x97, 0xd7, 0x36, 0xe1, 0x10, 0x67, 0xdc, 0xdf, 0xba,
		0xfe, 0x99, 0x48, 0xac, 0x0c, 0x5d, 0xef, 0x5e, 0xdd, 0xcf, 0xc3, 0x74, 0xe8, 0x4e, 0xd1, 0x97,
		0xfa, 0x5a, 0x4b, 0x77, 0x87, 0x60, 0xfe, 0x06, 0x67, 0x16, 0x19, 0x3f, 0x6c, 0x6c, 0xfd, 0x15,
		0xdd, 0x25, 0xe4, 0x2f, 0x40, 0x51, 0x90, 0xb7, 0x6d, 0x0f, 0x1b, 0x4e, 0xd3, 0x36, 0x6f, 0xe0,
		0xc6, 0x10, 0xd4, 0x7f, 0xde, 0xb3, 0x54, 0xf5, 0x08, 0x9c, 0x30, 0xd7, 0x40, 0x0e, 0x7b, 0x15,
		0xcd, 0x6c, 0xb9, 0x8e, 0x17, 0xc4, 0x30, 0xfe, 0x85, 0x58, 0xa9, 0x10, 0x57, 0xa3, 0x30, 0xa5,
		0x0a, 0x05, 0xfa, 0x38, 0x6c, 0x48, 0xfe, 0x25, 0x27, 0x1a, 0xeb, 0xa0, 0x78, 0xe2, 0x30, 0x9c,
		0x96, 0xab, 0x7b, 0xc3, 0xe4, 0xbf, 0xbf, 0x12, 0x89, 0x83, 0x43, 0x78, 0xe2, 0x08, 0x76, 0x5d,
		0x4c, 0xaa, 0xfd, 0x10, 0x0c, 0xdf, 0x14, 0x89, 0x43, 0x60, 0x38, 0x85, 0x68, 0x18, 0x86, 0xa0,
		0xf8, 0x6b, 0x41, 0x21, 0x30, 0x84, 0xe2, 0xb3, 0x9d, 0x42, 0xeb, 0xe1, 0xa6, 0xe9, 0x07, 0x1e,
		0xeb, 0x86, 0xef, 0x4d, 0xf5, 0xad, 0x0f, 0xba, 0x9b, 0x30, 0x35, 0x02, 0x25, 0x99, 0x88, 0xdf,
		0xa2, 0xd2, 0xc3, 0x52, 0xbc, 0x61, 0xdf, 0x16, 0x99, 0x28, 0x02, 0x23, 0xb6, 0x45, 0x3a, 0x44,
		0xe2, 0x76, 0x83, 0x1c, 0x11, 0x86, 0xa0, 0xfb, 0x4e, 0x8f, 0x71, 0x1b, 0x02, 0x4b, 0x38, 0x23,
		0xfd, 0x4f, 0xdb, 0xbe, 0x82, 0x77, 0x87, 0x8a, 0xce, 0xbf, 0xe9, 0xe9, 0x7f, 0xea, 0x0c, 0xc9,
		0x72, 0xc8, 0x78, 0x4f, 0x3f, 0x85, 0xe2, 0x7e, 0x08, 0x54, 0xfc, 0x99, 0xbb, 0x7c, 0xbe, 0xdd,
		0xed, 0x94, 0xb2, 0x4c, 0x82, 0xbc, 0xbb, 0xe9, 0x89, 0x27, 0x7b, 0xe5, 0x6e, 0x18, 0xe7, 0x5d,
		0x3d, 0x8f, 0x72, 0x09, 0xc6, 0xba, 0x1a, 0x9e, 0x78, 0xaa, 0x9f, 0xe5, 0x54, 0xf9, 0x68, 0xbf,
		0xa3, 0x9c, 0x85, 0x14, 0x69, 0x5e, 0xe2, 0xe1, 0x3f, 0xc7, 0xe1, 0x54, 0x5d, 0x79, 0x1a, 0x32,
		0xa2, 0x69, 0x89, 0x87, 0xfe, 0x3c, 0x87, 0x86, 0x10, 0x02, 0x17, 0x0d, 0x4b, 0x3c, 0xfc, 0x17,
		0x04, 0x5c, 0x40, 0x08, 0x7c, 0x78, 0x17, 0x7e, 0xf7, 0x97, 0x52, 0xbc, 0xe8, 0x08, 0xdf, 0x5d,
		0x84, 0x51, 0xde, 0xa9, 0xc4, 0xa3, 0xbf, 0xc0, 0x5f, 0x2e, 0x10, 0xca, 0x79, 0x48, 0x0f, 0xe9,
		0xf0, 0x5f, 0xe1, 0x50, 0xa6, 0xaf, 0x54, 0x20, 0x17, 0xe9, 0x4e, 0xe2, 0xe1, 0xbf, 0xca, 0xe1,
		0x51, 0x14, 0x31, 0x9d, 0x77, 0x27, 0xf1, 0x04, 0xbf, 0x26, 0x4c, 0xe7, 0x08, 0xe2, 0x36, 0xd1,
		0x98, 0xc4, 0xa3, 0x7f, 0x5d, 0x78, 0x5d, 0x40, 0x94, 0x67, 0x20, 0x1b, 0x16, 0x9b, 0x78, 0xfc,
		0x6f, 0x70, 0x7c, 0x07, 0x43, 0x3c, 0x10, 0x29, 0x76, 0xf1, 0x14, 0x5f, 0x14, 0x1e, 0x88, 0xa0,
		0xc8, 0x36, 0xea, 0x6d, 0x60, 0xe2, 0x99, 0x7e, 0x53, 0x6c, 0xa3, 0x9e, 0xfe, 0x85, 0xac, 0x26,
		0xcd, 0xf9, 0xf1, 0x14, 0xbf, 0x25, 0x56, 0x93, 0xea, 0x13, 0x33, 0x7a, 0x3b, 0x82, 0x78, 0x8e,
		0xdf, 0x16, 0x66, 0xf4, 0x34, 0x04, 0xca, 0x3a, 0xa0, 0xfe, 0x6e, 0x20, 0x9e, 0xef, 0x4b, 0x9c,
		0x6f, 0xa2, 0xaf, 0x19, 0x50, 0x9e, 0x87, 0x43, 0x83, 0x3b, 0x81, 0x78, 0xd6, 0x2f, 0xdf, 0xed,
		0x39, 0xbb, 0x45, 0x1b, 0x01, 0x65, 0xb3, 0x53, 0x52, 0xa2, 0x5d, 0x40, 0x3c, 0xed, 0xab, 0x77,
		0xbb, 0x13, 0x77, 0xb4, 0x09, 0x50, 0x4a, 0x00, 0x9d, 0x02, 0x1c, 0xcf, 0xf5, 0x1a, 0xe7, 0x8a,
		0x80, 0xc8, 0xd6, 0xe0, 0xf5, 0x37, 0x1e, 0xff, 0x15, 0xb1, 0x35, 0x38, 0x82, 0x6c, 0x0d, 0x51,
		0x7a, 0xe3, 0xd1, 0xaf, 0x8b, 0xad, 0x21, 0x20, 0x24, 0xb2, 0x23, 0xd5, 0x2d, 0x9e, 0xe1, 0x4d,
		0x11, 0xd9, 0x11, 0x94, 0xb2, 0x0a, 0x13, 0x7d, 0x05, 0x31, 0x9e, 0xea, 0xab, 0x9c, 0x4a, 0xee,
		0xad, 0x87, 0xd1, 0xe2, 0xc5, 0x8b, 0x61, 0x3c, 0xdb, 0xef, 0xf5, 0x14, 0x2f, 0x5e, 0x0b, 0x95,
		0x8b, 0x90, 0xb1, 0xdb, 0x96, 0x45, 0x36, 0x0f, 0xba, 0xf7, 0x8f, 0xf7, 0x8a, 0xff, 0xf6, 0x11,
		0xf7, 0x8e, 0x00, 0x28, 0x67, 0x21, 0x8d, 0x5b, 0x5b, 0xb8, 0x11, 0x87, 0xfc, 0xf7, 0x8f, 0x44,
		0xc2, 0x24, 0xda, 0xca, 0x33, 0x00, 0xec, 0x6a, 0x84, 0x7e, 0xf9, 0x8b, 0xc1, 0xfe, 0xc7, 0x47,
		0xfc, 0x67, 0x35, 0x1d, 0x48, 0x87, 0x80, 0xfd, 0x48, 0xe7, 0xde, 0x04, 0x1f, 0x74, 0x13, 0xd0,
		0x15, 0x79, 0x0a, 0x46, 0x2f, 0xfb, 0x8e, 0x1d, 0xe8, 0xcd, 0x38, 0xf4, 0x7f, 0x72, 0xb4, 0xd0,
		0x27, 0x0e, 0x6b, 0x39, 0x1e, 0x0e, 0xf4, 0xa6, 0x1f, 0x87, 0xfd, 0x2f, 0x8e, 0x0d, 0x01, 0x04,
		0x6c, 0xe8, 0x7e, 0x30, 0xcc, 0xbc, 0xff, 0x5b, 0x80, 0x05, 0x80, 0x18, 0x4d, 0xfe, 0xbf, 0x82,
		0x77, 0xe3, 0xb0, 0x1f, 0x0a, 0xa3, 0xb9, 0xbe, 0xf2, 0x34, 0x64, 0xc9, 0xbf, 0xec, 0xb7, 0x72,
		0x31, 0xe0, 0xff, 0xe1, 0xe0, 0x0e, 0x82, 0xbc, 0xd9, 0x0f, 0x1a, 0x81, 0x19, 0xef, 0xec, 0xff,
		0xe5, 0x2b, 0x2d, 0xf4, 0x95, 0x12, 0xe4, 0xfc, 0xa0, 0xd1, 0x68, 0xf3, 0xfe, 0x34, 0x06, 0xfe,
		0x7f, 0x1f, 0x85, 0x57, 0x16, 0x21, 0x86, 0xac, 0xf6, 0xb5, 0x2b, 0x81, 0xeb, 0xd0, 0x2f, 0x1d,
		0x71, 0x0c, 0x77, 0x39, 0x43, 0x04, 0x52, 0x7e, 0x76, 0xf0, 0x0d, 0x2e, 0x2c, 0x39, 0x4b, 0x0e,
		0xbb, 0xbb, 0x7d, 0xe9, 0xe1, 0xa1, 0x2e, 0x61, 0xe1, 0x56, 0x0a, 0xc6, 0xf0, 0x75, 0xbd, 0xe5,
		0x0a, 0x1e, 0x94, 0x22, 0x35, 0x78, 0x7a, 0xdf, 0x77, 0xb8, 0x73, 0x5f, 0x94, 0x40, 0x2a, 0xa1,
		0x47, 0x20, 0xb7, 0xd8, 0x69, 0x02, 0xd8, 0x0f, 0xae, 0xca, 0xa9, 0x5b, 0xb7, 0x67, 0x0f, 0xa8,
		0xd1, 0x01, 0x74, 0x3f, 0x8c, 0xac, 0x76, 0x7e, 0xb4, 0x97, 0xe4, 0x2a, 0x5c, 0x86, 0x9e, 0x86,
		0x44, 0x8d, 0x7d, 0x63, 0xcd, 0x97, 0x1f, 0x27, 0x23, 0xff, 0x78, 0x7b, 0xf6, 0x9e, 0x13, 0x22,
		0x36, 0x2f, 0xd4, 0xdb, 0x66, 0x43, 0x4d, 0xd4, 0x1a, 0x4a, 0xe6, 0x17, 0xdf, 0x98, 0x3d, 0xf0,
		0xf6, 0x1b, 0xb3, 0xd2, 0xdc, 0xcb, 0x20, 0x95, 0xd1, 0x2c, 0x48, 0x25, 0x6a, 0x49, 0xee, 0xf4,
		0xe8, 0x02, 0xd5, 0x2c, 0x95, 0x33, 0x84, 0xf5, 0x9d, 0xdb, 0xb3, 0x92, 0x2a, 0x95, 0x50, 0x15,
		0xa4, 0x25, 0xfa, 0x35, 0x22, 0x5f, 0x3e, 0xcf, 0xdf, 0x76, 0x2a, 0xee, 0x6d, 0xa7, 0xd8, 0xe6,
		0x5b, 0xa8, 0x9b, 0x76, 0xf0, 0x63, 0xa7, 0x2f, 0xa8, 0xd2, 0x92, 0x92, 0xfa, 0x90, 0xbc, 0xf2,
		0x41, 0x90, 0x2a, 0x68, 0x06, 0x52, 0x24, 0x31, 0xd2, 0xb7, 0x26, 0xcb, 0x70, 0xe7, 0xf6, 0xec,
		0xc8, 0xca, 0x2e, 0xc9, 0x77, 0x2a, 0x95, 0xcf, 0x9d, 0x07, 0xa9, 0x8e, 0x0e, 0xf6, 0xdb, 0x45,
		0xac, 0x39, 0x08, 0x52, 0x99, 0xff, 0x32, 0x95, 0x8b, 0xcb, 0xaa, 0x54, 0x56, 0x52, 0xb7, 0x08,
		0xfb, 0x24, 0x48, 0xd5, 0x13, 0x99, 0x8c, 0xc4, 0xbe, 0xb2, 0x29, 0xa9, 0x5b, 0x6f, 0xce, 0x1e,
		0x98, 0x3b, 0x0e, 0x92, 0x8a, 0x66, 0x00, 0x3a, 0x55, 0x8a, 0xd2, 0x8e, 0xa9, 0x11, 0x89, 0x92,
		0x7a, 0x87, 0xa8, 0x9e, 0x84, 0x4c, 0x45, 0xf7, 0xc5, 0x8f, 0xfd, 0xd2, 0x35, 0x3b, 0x78, 0xf2,
		0x34, 0xb7, 0x32, 0xfb, 0xff, 0xb7, 0x67, 0xd3, 0x26, 0x11, 0xa8, 0x4c, 0x5e, 0x7e, 0xec, 0x1f,
		0xde, 0x9b, 0x39, 0xf0, 0xee, 0x7b, 0x33, 0xd2, 0x87, 0xef, 0xcd, 0x48, 0x3f, 0x78, 0x6f, 0x46,
		0xba, 0x79, 0x67, 0x46, 0x7a, 0xfb, 0xce, 0x8c, 0xf4, 0xad, 0x3b, 0x33, 0xd2, 0x77, 0xef, 0xcc,
		0x48, 0xb7, 0xee, 0xcc, 0x48, 0xef, 0xdc, 0x99, 0x91, 0xde, 0xbd, 0x33, 0x23, 0xfd, 0x30, 0x00,
		0x00, 0xff, 0xff, 0xf4, 0xaf, 0xd7, 0x83, 0x45, 0x35, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_waynz0r_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *A) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*A)
	if !ok {
		that2, ok := that.(A)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *A")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *A but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *A but is not nil && this == nil")
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if this.Number != that1.Number {
		return fmt.Errorf("Number this(%v) Not Equal that(%v)", this.Number, that1.Number)
	}
	if !this.Id.Equal(that1.Id) {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *A) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*A)
	if !ok {
		that2, ok := that.(A)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *B) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*B)
	if !ok {
		that2, ok := that.(B)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *B")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *B but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *B but is not nil && this == nil")
	}
	if !this.A.Equal(&that1.A) {
		return fmt.Errorf("A this(%v) Not Equal that(%v)", this.A, that1.A)
	}
	if len(this.G) != len(that1.G) {
		return fmt.Errorf("G this(%v) Not Equal that(%v)", len(this.G), len(that1.G))
	}
	for i := range this.G {
		if !this.G[i].Equal(that1.G[i]) {
			return fmt.Errorf("G this[%v](%v) Not Equal that[%v](%v)", i, this.G[i], i, that1.G[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *B) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*B)
	if !ok {
		that2, ok := that.(B)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.A.Equal(&that1.A) {
		return false
	}
	if len(this.G) != len(that1.G) {
		return false
	}
	for i := range this.G {
		if !this.G[i].Equal(that1.G[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *C) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*C)
	if !ok {
		that2, ok := that.(C)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *C")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *C but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *C but is not nil && this == nil")
	}
	if this.MySize != nil && that1.MySize != nil {
		if *this.MySize != *that1.MySize {
			return fmt.Errorf("MySize this(%v) Not Equal that(%v)", *this.MySize, *that1.MySize)
		}
	} else if this.MySize != nil {
		return fmt.Errorf("this.MySize == nil && that.MySize != nil")
	} else if that1.MySize != nil {
		return fmt.Errorf("MySize this(%v) Not Equal that(%v)", this.MySize, that1.MySize)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *C) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C)
	if !ok {
		that2, ok := that.(C)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MySize != nil && that1.MySize != nil {
		if *this.MySize != *that1.MySize {
			return false
		}
	} else if this.MySize != nil {
		return false
	} else if that1.MySize != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *U) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*U)
	if !ok {
		that2, ok := that.(U)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *U")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *U but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *U but is not nil && this == nil")
	}
	if !this.A.Equal(that1.A) {
		return fmt.Errorf("A this(%v) Not Equal that(%v)", this.A, that1.A)
	}
	if !this.B.Equal(that1.B) {
		return fmt.Errorf("B this(%v) Not Equal that(%v)", this.B, that1.B)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *U) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*U)
	if !ok {
		that2, ok := that.(U)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.A.Equal(that1.A) {
		return false
	}
	if !this.B.Equal(that1.B) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *E) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*E)
	if !ok {
		that2, ok := that.(E)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *E")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *E but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *E but is not nil && this == nil")
	}
	if !bytes.Equal(this.XXX_extensions, that1.XXX_extensions) {
		return fmt.Errorf("XXX_extensions this(%v) Not Equal that(%v)", this.XXX_extensions, that1.XXX_extensions)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *E) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*E)
	if !ok {
		that2, ok := that.(E)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_extensions, that1.XXX_extensions) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *R) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*R)
	if !ok {
		that2, ok := that.(R)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *R")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *R but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *R but is not nil && this == nil")
	}
	if this.Recognized != nil && that1.Recognized != nil {
		if *this.Recognized != *that1.Recognized {
			return fmt.Errorf("Recognized this(%v) Not Equal that(%v)", *this.Recognized, *that1.Recognized)
		}
	} else if this.Recognized != nil {
		return fmt.Errorf("this.Recognized == nil && that.Recognized != nil")
	} else if that1.Recognized != nil {
		return fmt.Errorf("Recognized this(%v) Not Equal that(%v)", this.Recognized, that1.Recognized)
	}
	return nil
}
func (this *R) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*R)
	if !ok {
		that2, ok := that.(R)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Recognized != nil && that1.Recognized != nil {
		if *this.Recognized != *that1.Recognized {
			return false
		}
	} else if this.Recognized != nil {
		return false
	} else if that1.Recognized != nil {
		return false
	}
	return true
}
func (this *CastType) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CastType)
	if !ok {
		that2, ok := that.(CastType)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CastType")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CastType but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CastType but is not nil && this == nil")
	}
	if this.Int32 != nil && that1.Int32 != nil {
		if *this.Int32 != *that1.Int32 {
			return fmt.Errorf("Int32 this(%v) Not Equal that(%v)", *this.Int32, *that1.Int32)
		}
	} else if this.Int32 != nil {
		return fmt.Errorf("this.Int32 == nil && that.Int32 != nil")
	} else if that1.Int32 != nil {
		return fmt.Errorf("Int32 this(%v) Not Equal that(%v)", this.Int32, that1.Int32)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CastType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CastType)
	if !ok {
		that2, ok := that.(CastType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Int32 != nil && that1.Int32 != nil {
		if *this.Int32 != *that1.Int32 {
			return false
		}
	} else if this.Int32 != nil {
		return false
	} else if that1.Int32 != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type AFace interface {
	Proto() github_com_waynz0r_protobuf_proto.Message
	GetDescription() string
	GetNumber() int64
	GetId() github_com_waynz0r_protobuf_test.Uuid
}

func (this *A) Proto() github_com_waynz0r_protobuf_proto.Message {
	return this
}

func (this *A) TestProto() github_com_waynz0r_protobuf_proto.Message {
	return NewAFromFace(this)
}

func (this *A) GetDescription() string {
	return this.Description
}

func (this *A) GetNumber() int64 {
	return this.Number
}

func (this *A) GetId() github_com_waynz0r_protobuf_test.Uuid {
	return this.Id
}

func NewAFromFace(that AFace) *A {
	this := &A{}
	this.Description = that.GetDescription()
	this.Number = that.GetNumber()
	this.Id = that.GetId()
	return this
}

func (this *A) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&test.A{")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *B) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&test.B{")
	s = append(s, "A: "+strings.Replace(this.A.GoString(), `&`, ``, 1)+",\n")
	if this.G != nil {
		s = append(s, "G: "+fmt.Sprintf("%#v", this.G)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&test.C{")
	if this.MySize != nil {
		s = append(s, "MySize: "+valueToGoStringExample(this.MySize, "int64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *U) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&test.U{")
	if this.A != nil {
		s = append(s, "A: "+fmt.Sprintf("%#v", this.A)+",\n")
	}
	if this.B != nil {
		s = append(s, "B: "+fmt.Sprintf("%#v", this.B)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *E) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&test.E{")
	if this.XXX_extensions != nil {
		s = append(s, "XXX_extensions: "+fmt.Sprintf("%#v", this.XXX_extensions)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *R) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&test.R{")
	if this.Recognized != nil {
		s = append(s, "Recognized: "+valueToGoStringExample(this.Recognized, "uint32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CastType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&test.CastType{")
	if this.Int32 != nil {
		s = append(s, "Int32: "+valueToGoStringExample(this.Int32, "int32")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringExample(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *A) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *A) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *A) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size := m.Id.Size()
		i -= size
		if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExample(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	i = encodeVarintExample(dAtA, i, uint64(m.Number))
	i--
	dAtA[i] = 0x10
	i -= len(m.Description)
	copy(dAtA[i:], m.Description)
	i = encodeVarintExample(dAtA, i, uint64(len(m.Description)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *B) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *B) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *B) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.G) > 0 {
		for iNdEx := len(m.G) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.G[iNdEx].Size()
				i -= size
				if _, err := m.G[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintExample(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.A.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExample(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *C) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MySize != nil {
		i = encodeVarintExample(dAtA, i, uint64(*m.MySize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *U) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *U) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *U) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.B != nil {
		{
			size, err := m.B.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExample(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.A != nil {
		{
			size, err := m.A.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExample(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.XXX_extensions != nil {
		i -= len(m.XXX_extensions)
		copy(dAtA[i:], m.XXX_extensions)
	}
	return len(dAtA) - i, nil
}

func (m *R) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *R) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *R) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Recognized != nil {
		i = encodeVarintExample(dAtA, i, uint64(*m.Recognized))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CastType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CastType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CastType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Int32 != nil {
		i = encodeVarintExample(dAtA, i, uint64(*m.Int32))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintExample(dAtA []byte, offset int, v uint64) int {
	offset -= sovExample(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedA(r randyExample, easy bool) *A {
	this := &A{}
	this.Description = string(randStringExample(r))
	this.Number = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Number *= -1
	}
	v1 := github_com_waynz0r_protobuf_test.NewPopulatedUuid(r)
	this.Id = *v1
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedExample(r, 4)
	}
	return this
}

func NewPopulatedB(r randyExample, easy bool) *B {
	this := &B{}
	v2 := NewPopulatedA(r, easy)
	this.A = *v2
	if r.Intn(5) != 0 {
		v3 := r.Intn(10)
		this.G = make([]github_com_waynz0r_protobuf_test_custom.Uint128, v3)
		for i := 0; i < v3; i++ {
			v4 := github_com_waynz0r_protobuf_test_custom.NewPopulatedUint128(r)
			this.G[i] = *v4
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedExample(r, 3)
	}
	return this
}

func NewPopulatedC(r randyExample, easy bool) *C {
	this := &C{}
	if r.Intn(5) != 0 {
		v5 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		this.MySize = &v5
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedExample(r, 2)
	}
	return this
}

func NewPopulatedU(r randyExample, easy bool) *U {
	this := &U{}
	fieldNum := r.Intn(2)
	switch fieldNum {
	case 0:
		this.A = NewPopulatedA(r, easy)
	case 1:
		this.B = NewPopulatedB(r, easy)
	}
	return this
}

func NewPopulatedE(r randyExample, easy bool) *E {
	this := &E{}
	if !easy && r.Intn(10) != 0 {
		l := r.Intn(5)
		for i := 0; i < l; i++ {
			fieldNumber := r.Intn(536870911) + 1
			wire := r.Intn(4)
			if wire == 3 {
				wire = 5
			}
			dAtA := randFieldExample(nil, r, fieldNumber, wire)
			github_com_waynz0r_protobuf_proto.SetRawExtension(this, int32(fieldNumber), dAtA)
		}
	}
	return this
}

func NewPopulatedR(r randyExample, easy bool) *R {
	this := &R{}
	if r.Intn(5) != 0 {
		v6 := uint32(r.Uint32())
		this.Recognized = &v6
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCastType(r randyExample, easy bool) *CastType {
	this := &CastType{}
	if r.Intn(5) != 0 {
		v7 := int32(r.Int63())
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		this.Int32 = &v7
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedExample(r, 2)
	}
	return this
}

type randyExample interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneExample(r randyExample) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringExample(r randyExample) string {
	v8 := r.Intn(100)
	tmps := make([]rune, v8)
	for i := 0; i < v8; i++ {
		tmps[i] = randUTF8RuneExample(r)
	}
	return string(tmps)
}
func randUnrecognizedExample(r randyExample, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldExample(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldExample(dAtA []byte, r randyExample, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateExample(dAtA, uint64(key))
		v9 := r.Int63()
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		dAtA = encodeVarintPopulateExample(dAtA, uint64(v9))
	case 1:
		dAtA = encodeVarintPopulateExample(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateExample(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateExample(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateExample(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateExample(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *A) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	n += 1 + l + sovExample(uint64(l))
	n += 1 + sovExample(uint64(m.Number))
	l = m.Id.Size()
	n += 1 + l + sovExample(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *B) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.A.Size()
	n += 1 + l + sovExample(uint64(l))
	if len(m.G) > 0 {
		for _, e := range m.G {
			l = e.Size()
			n += 1 + l + sovExample(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MySize != nil {
		n += 1 + sovExample(uint64(*m.MySize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *U) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.A != nil {
		l = m.A.Size()
		n += 1 + l + sovExample(uint64(l))
	}
	if m.B != nil {
		l = m.B.Size()
		n += 1 + l + sovExample(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *E) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_extensions != nil {
		n += len(m.XXX_extensions)
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *R) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Recognized != nil {
		n += 1 + sovExample(uint64(*m.Recognized))
	}
	return n
}

func (m *CastType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Int32 != nil {
		n += 1 + sovExample(uint64(*m.Int32))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovExample(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExample(x uint64) (n int) {
	return sovExample(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *A) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&A{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *B) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&B{`,
		`A:` + strings.Replace(strings.Replace(this.A.String(), "A", "A", 1), `&`, ``, 1) + `,`,
		`G:` + fmt.Sprintf("%v", this.G) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C{`,
		`MySize:` + valueToStringExample(this.MySize) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *U) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&U{`,
		`A:` + strings.Replace(this.A.String(), "A", "A", 1) + `,`,
		`B:` + strings.Replace(this.B.String(), "B", "B", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *E) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&E{`,
		`XXX_extensions:` + github_com_waynz0r_protobuf_proto.StringFromExtensionsBytes(this.XXX_extensions) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *R) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&R{`,
		`Recognized:` + valueToStringExample(this.Recognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CastType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CastType{`,
		`Int32:` + valueToStringExample(this.Int32) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringExample(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (this *U) GetValue() interface{} {
	if this.A != nil {
		return this.A
	}
	if this.B != nil {
		return this.B
	}
	return nil
}

func (this *U) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *A:
		this.A = vt
	case *B:
		this.B = vt
	default:
		return false
	}
	return true
}
func (m *A) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: A: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: A: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *B) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: B: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: B: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.A.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field G", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_waynz0r_protobuf_test_custom.Uint128
			m.G = append(m.G, v)
			if err := m.G[len(m.G)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MySize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MySize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *U) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: U: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: U: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.A == nil {
				m.A = &A{}
			}
			if err := m.A.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.B == nil {
				m.B = &B{}
			}
			if err := m.B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			if (fieldNum >= 1) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipExample(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthExample
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				github_com_waynz0r_protobuf_proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipExample(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return ErrInvalidLengthExample
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *R) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: R: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: R: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recognized", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Recognized = &v
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CastType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CastType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CastType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Int32 = &v
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExample(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExample
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExample
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExample
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExample
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExample        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExample          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExample = fmt.Errorf("proto: unexpected end of group")
)
